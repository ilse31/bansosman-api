// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	daerah "bansosman/bussiness/daerah"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: daerahs, id
func (_m *Repository) Delete(daerahs *daerah.Domain, id int) (string, error) {
	ret := _m.Called(daerahs, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(*daerah.Domain, int) string); ok {
		r0 = rf(daerahs, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*daerah.Domain, int) error); ok {
		r1 = rf(daerahs, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]daerah.Domain, error) {
	ret := _m.Called()

	var r0 []daerah.Domain
	if rf, ok := ret.Get(0).(func() []daerah.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]daerah.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCity provides a mock function with given fields: city
func (_m *Repository) FindByCity(city string) ([]daerah.Domain2, error) {
	ret := _m.Called(city)

	var r0 []daerah.Domain2
	if rf, ok := ret.Get(0).(func(string) []daerah.Domain2); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]daerah.Domain2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int) (*daerah.Domain, error) {
	ret := _m.Called(id)

	var r0 *daerah.Domain
	if rf, ok := ret.Get(0).(func(int) *daerah.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*daerah.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: daerahs
func (_m *Repository) Insert(daerahs *daerah.Domain) (*daerah.Domain, error) {
	ret := _m.Called(daerahs)

	var r0 *daerah.Domain
	if rf, ok := ret.Get(0).(func(*daerah.Domain) *daerah.Domain); ok {
		r0 = rf(daerahs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*daerah.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*daerah.Domain) error); ok {
		r1 = rf(daerahs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, id
func (_m *Repository) Update(_a0 *daerah.Domain, id int) (*daerah.Domain, error) {
	ret := _m.Called(_a0, id)

	var r0 *daerah.Domain
	if rf, ok := ret.Get(0).(func(*daerah.Domain, int) *daerah.Domain); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*daerah.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*daerah.Domain, int) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
